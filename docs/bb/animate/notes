

1. Do math with arbitrary objects by deferring the function application until numbers are found: wrapped.bind(unary function)
2. Do lerping stuff





A Lerp is a pair of elements and a function: time -> [0, 1]
Any function applied to a Lerp gets postponed


Are Lerps basically split pointers?






ax^3 + bx^2 + cx
3ax^2 + 2bx + c

a + b = 1
3a + 2b = 0

a = -2
b = 3




ax^5 + bx^4 + cx^3 + dx^2 + ex + f
5ax^4 + 4bx^3 + 3cx^2 + 2dx + e
20ax^3 + 12bx^2 + 6cx + 2d

e = f = 0
a + b + c + d = 1
5a + 4b + 3c + 2d = 0


d = e = f = 0
a + b + c = 1
5a + 4b + 3c = 0
20a + 12b + 6c = 0










CREATE WHOLE INTERPRETED LANGUAGE THAT SELF PRUNES AS IT RUNS
- HAVE SEVERAL FORMS
- INCLUDING A GETTIME FORM
- AND A LERP FORM (LIKE A STRANGE IF-THEN-ELSE)

- NODES KEEP TRACK OF IF THEY ARE FINAL AND IF THEY ARE CONSTANT

- CAN WE GIVE HINTS TO THE JIT COMPILER TO DO THIS FOR US?
	- PROBABLY NOT, IT IS DUMB

- DON'T BE AS OBJECT ORIENTED; SEPARATE THE INTERPRETER FROM AST

- EVENTUALLY USE ANIMATION TO VISUALIZE SELF PRUNING...




- Simplify the language
	- no functions!
	- functions just behave like macros?












